 ------
 Альтернативный способ добавления зависимостей с помощью переменной
 ------
 Dmitry Samoshin aka gotty
 ------
 2015-10-22
 ------

~~ Copyright (c) 2015. Developed by Hedgecode.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Альтернативный способ добавления зависимостей с помощью переменной

  Альтернативным вариантом подключения сторонних библиотек к проекту
  на стадии компиляции является возможность использования переменной,
  в которую будет записан сформированный classpath, с последующим
  указанием в плагине <<<maven-compiler-plugin>>> строки компиляции
  с переопределенным аргументом classpath.

  Данный вариант использования плагина может понадобиться тогда, когда необходимо
  сохранить оригинальные зависимости (dependencies) maven проекта (из <<<pom.xml>>>).

  Запись сформированного описываемым плагином classpath в переменную
  (в данном примере: <<<your.classpath.property>>>) выглядит следующим образом:

+-------
<plugin>
    <groupId>${project.groupId}</groupId>
    <artifactId>${project.artifactId}</artifactId>
    <version>${project.version}</version>
    <configuration>
        <path>lib/*.jar</path>
        <isMask>true</isMask>
        <outputProperty>your.classpath.property</outputProperty>
        <assignProjectClasspath>false</assignProjectClasspath>
    </configuration>
</plugin>
+-------

  Конфигурация плагина <<<maven-compiler-plugin>>> для компиляции вашего проекта
  в этом случае должна выглядить примерно следующим образом:

+-------
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <compilerArgs>
            <arg>-classpath</arg>
            <arg>${maven.compile.classpath}${path.separator}${your.classpath.property}</arg>
        </compilerArgs>
    </configuration>
</plugin>
+-------